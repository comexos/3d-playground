buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'kotlin2js'
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
}

compileKotlin2Js {
    kotlinOptions {
        outputFile = "$buildDir/classes/kotlin/main/${project.name}.js"
        sourceMap = true
    }
}

compileTestKotlin2Js {
    kotlinOptions {
        outputFile = "$buildDir/classes/kotlin/test/${project.name}_test.js"
        sourceMap = true
    }
}


sourceSets {
    main {
        output.resourcesDir = "build/classes/kotlin/main"
    }
    test {
        output.resourcesDir = "build/classes/kotlin/test"
    }
}

build.doLast() {
    // Copy kotlin.js and kotlin-meta.js from jar into out dir
    configurations.compile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${buildDir}/classes/kotlin/main/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                (path.endsWith(".js") || path.endsWith(".map")) && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

    configurations.testCompile.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${buildDir}/classes/kotlin/test/lib"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                (path.endsWith(".js") || path.endsWith(".map")) && (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
            }
        }
    }

}


apply plugin: 'idea'
idea {
    module {
        outputDir file('build/classes/kotlin/main')
        testOutputDir file('build/classes/kotlin/test')
    }
}